trigger:
  branches:
    include:
      - main

stages:

  # ---------------------------
  - stage: Dev
    displayName: Dev Environment - Build and Test
    jobs:
      - job: BuildTest
        displayName: Build & Run Model Tests
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.10'

          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install Dependencies'

          - script: |
              echo "Listing files..."
              ls -al
            displayName: 'Check files in repo'

          - script: |
              echo "Running model test from app.py..."
              python app.py
            displayName: 'Run app.py Model Test'
            continueOnError: false  # Fails if test fails

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: 'model_output'
              artifactName: 'model_artifacts'
              publishLocation: 'Container'
            displayName: 'Publish Model Artifacts'

  # ---------------------------
  - stage: Prod
    displayName: Prod Environment - Release
    dependsOn: Dev
    condition: succeeded()

    jobs:
      - job: Release
        displayName: Release to Production
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - download: current
            artifact: model_artifacts

          - script: |
              echo "Models and artifacts are ready for production."
              echo "Hitting live Render API to verify deployment..."

              # Live Render endpoint (replace if renamed)
              ENDPOINT="https://fraud-detection-model-ylql.onrender.com/test-case?index=40"

              echo "Calling $ENDPOINT..."
              RESPONSE=$(curl -s $ENDPOINT)

              echo "Response from API:"
              echo "$RESPONSE"

              # Count number of predictions equal to 1
              CORRECT=$(echo "$RESPONSE" | grep -o '"prediction": 1' | wc -l)
              echo "Correct predictions: $CORRECT"

              # Set how many models must predict fraud for a pass
              REQUIRED=6

              if [ "$CORRECT" -lt "$REQUIRED" ]; then
                echo "Not all models predicted fraud. Deployment failed."
                exit 1
              else
                echo "All models predicted fraud correctly. Releasing to production!"
              fi
            displayName: 'Validate FastAPI Deployment'
